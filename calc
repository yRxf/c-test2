#include <iostream>
#include<vector>
#include <algorithm>
#include<cstring>
using namespace std;

double clc(vector<double> su, vector<char> str);  //计算，传入数值，算式
//暂不支持括号
int main()
{
    string test;    //输入需要计算的式子
    cout << "请输入需要计算的公式（最后请附上 = ）:" << endl;
    getline(cin, test);
    vector<double> i;   //存储字符0-9将其变为实数
    vector<char> str;   //存储运算符
    vector<double> su;  //存储所有实数
    double sult;        //结果
    for (auto a = test.begin(); a != test.end(); ++a)
    {
        if (*a >= '0' && *a <= '9')
        {
            double z = *a-'0';     //使其变为准确的数值
            i.push_back(z);
        }
        else if (*a == '.')
        {
            i.push_back(11);    //标识小数
        }
        else
        {
            if (!i.empty())
            {
                double sum = 0;
                auto it = find(i.begin(),i.end(),11);   //value为要查找的值，该函数返回一个指向对应元素的迭代器
                if(it!=i.end())                         //如果有，则是小数
                {
                    int count = 0;
                    for (auto vg = it - 1; vg != i.begin() - 1; --vg)
                    {
                        int count1 = count;
                        int ten = 1;
                        while (count1 != 0)
                        {
                            ten *= 10;
                            count1--;
                        }
                        sum += *vg * ten;
                        count++;
                    }
                    count = 1;
                    for (auto xc = it + 1; xc != i.end(); ++xc)
                    {
                        int count1 = count;
                        double ten = 1;
                        while (count1 != 0)
                        {
                            ten *= 0.1;
                            count1--;
                        }
                        sum += *xc * ten;
                        count++;
                    }
                }
                else            //整数
                {
                    int size = i.size();
                    int count = 1;
                    for (auto n = i.begin(); n != i.end(); ++n)
                    {
                        int size1 = size - count;
                        int ten = 1;
                        while (size1 > 0)
                        {
                            ten *= 10;
                            size1--;
                        }
                        sum += *n * ten;
                        count++;
                    }
                }
                i.clear();
                su.push_back(sum);
            }
            str.push_back(*a);      //将运算符号存入
        }

    }
    sult = clc(su, str);
    cout << test << sult << endl;
    // system("pause");
    cin.get();
    return 0;
}
// 123+567*890=
double clc(vector<double> su, vector<char> str)
{
    double result = 0, temp = 0; //count 记录符合的位置
    int count = 0;
    auto str_begin = str.begin();
    auto str_end = str.end();
    for (auto star = str_begin; star != str_end; ++star)
    {
        ++count;
        int su_zuo = count - 1; //符号左边的数
        int su_you = count; //符号右边的数

        if (*star == '*' || *star == '/')       //保证乘除优先。
        {

            switch (*star)
            {
                case '*':
                    cout << "\n";
                    temp = su[su_zuo] * su[su_you];
                    su[su_zuo] = temp;
                    su.erase(su.begin()+su_you);
                    --count;       //计数-1，去掉了一个数
                    break;
                case '/':
                    if(su[su_you]==0)
                    {
                        cout << "除数不能为0" << endl;
                        return 1;
                    }
                    temp = su[su_zuo] / su[su_you];
                    su[su_zuo] = temp;
                    su.erase(su.begin()+su_you);
                    --count;
                    break;
            }
        }
        else if (*star == '-')
            su[su_you] = -su[su_you];   //将-变成+负数
    }
    for (auto s = su.begin(); s != su.end();++s)
    {
        result += *s;      //所有为加法
    }
    return result;
}
